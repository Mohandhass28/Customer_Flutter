// Mocks generated by Mockito 5.4.4 from annotations
// in customer/test/data/repository/auth/auth_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:customer/core/error/failures.dart' as _i5;
import 'package:customer/data/models/auth/send_otp_model/send_otp_params.dart'
    as _i7;
import 'package:customer/data/models/auth/verify_otp_model/user_model.dart'
    as _i8;
import 'package:customer/data/models/auth/verify_otp_model/verify_otp.dart'
    as _i9;
import 'package:customer/data/source/auth/auth_api_service.dart' as _i3;
import 'package:customer/domain/auth/entities/send_otp.dart' as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthApiService extends _i1.Mock implements _i3.AuthApiService {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.SendOTP>> sendOTP(
          _i7.SendOTPParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendOTP,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.SendOTP>>.value(
            _FakeEither_0<_i5.Failure, _i6.SendOTP>(
          this,
          Invocation.method(
            #sendOTP,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.SendOTP>>.value(
                _FakeEither_0<_i5.Failure, _i6.SendOTP>(
          this,
          Invocation.method(
            #sendOTP,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.SendOTP>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.UserModel>> verifyOTP(
          _i9.VerifyOtpParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyOTP,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i8.UserModel>>.value(
            _FakeEither_0<_i5.Failure, _i8.UserModel>(
          this,
          Invocation.method(
            #verifyOTP,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i8.UserModel>>.value(
                _FakeEither_0<_i5.Failure, _i8.UserModel>(
          this,
          Invocation.method(
            #verifyOTP,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i8.UserModel>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> authCheck() => (super.noSuchMethod(
        Invocation.method(
          #authCheck,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #authCheck,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #authCheck,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
                _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
